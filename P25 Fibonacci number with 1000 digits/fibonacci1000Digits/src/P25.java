import java.math.BigInteger;

// 1000-digit Fibonacci number Problem 25
// The Fibonacci sequence is defined by the recurrence relation:

// Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
// Hence the first 12 terms will be:

// F1 = 1
// F2 = 1
// F3 = 2
// F4 = 3
// F5 = 5
// F6 = 8
// F7 = 13
// F8 = 21
// F9 = 34
// F10 = 55
// F11 = 89
// F12 = 144
// The 12th term, F12, is the first term to contain three digits.

// What is the index of the first term in the Fibonacci sequence to contain 1000 digits? - 4787

public class P25 {
    public static void main(String[] args) {
        long startTime = System.nanoTime();
        BigInteger limit = new BigInteger
        
        BigInteger f1 = new BigInteger("1");
        BigInteger f2 = new BigInteger("2");
        BigInteger f3 = BigInteger.ZERO;

        int i;
        for (i = 3; f2.compareTo(limit) < 0; i++) {
            f3 = f1.add(f2);
            f1 = f2;
            f2 = f3;
        }

        long endTime = System.nanoTime();
        System.out.printf("%,d%n",i);
        System.out.printf("Time taken: %,d%n", endTime-startTime);
    }
}
