import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 2^2=4, 2^3=8, 2^4=16, 2^5=32
// 3^2=9, 3^3=27, 3^4=81, 3^5=243
// 4^2=16, 4^3=64, 4^4=256, 4^5=1024
// 5^2=25, 5^3=125, 5^4=625, 5^5=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100? - 422

public class P29 {
    public static void main(String[] args)  {
        long startTime = System.nanoTime();
        int a1 = 2;
        int a2 = 100;
        int b1 = 2;
        int b2 = 100;

        List<Integer> numList = new ArrayList<>();

        for (int i = a1; i <= a2; i++) {
            for (int j = b1; j <= b2; j++) {
                double pow = Math.pow(i,j);
                numList.add((int)pow);
            }
        }
        numList = numList.stream().distinct().collect(Collectors.toList());

        long endTime = System.nanoTime();
        System.out.println(numList);
        
        System.out.println(numList.size());
        System.out.printf("Time taken: %,dns%n", endTime-startTime);
    }
}
