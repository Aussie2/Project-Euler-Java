// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?
// Benchmark!!
// https://stackoverflow.com/questions/18281956/java-code-for-project-euler-12
// 76576500 has > 500 even divisors
// Time taken: 432,077,600
// best achieved:
// 76576500 has > 500 even divisors
// Time taken: 238,361,100ns

public class App {
    public static void main(String[] args){
        long startTime = System.nanoTime();
        int limit = 500;
        boolean found = false;
        
        int i = 1;
        int sum = 0;
        while (! found) {
            sum = getNumber(i);
            if (countDivisors(sum, limit) > limit) {
                found = true;
            }
            i++;
        }
       long endTime = System.nanoTime();
       System.out.printf("%d has > 500 even divisors%n",sum);
       System.out.printf("Time taken: %,dns%n",endTime-startTime);
    
    }
    public static int getNumber(int num){
        return num*(num+1)/2;
    }

    public static int countDivisors(int sum, int limit){
        int count = 1;
        for (int j = 1; j*j < sum; j++) {
            if (sum % j == 0) {
                count += (sum % j == j ? 1:2);
                if (count > limit) {
                    return(count);
                }
            }
        }
        return(count);
    }
}
